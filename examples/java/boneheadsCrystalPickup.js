// Generated by CoffeeScript 1.8.0

/*
boneheadsCrystalPickup.coffee
Written by Seth Bullock
sedabull@gmail.com
 */

(function() {
  var AniSprite, Greenhorn, KEYS, Sound, bonehead, crystals, env, pickupSnd;

  document.title = 'Bonehead\'s Crystal Pickup';

  env = gh.env, Greenhorn = gh.Greenhorn, AniSprite = gh.AniSprite, Sound = gh.Sound, KEYS = gh.KEYS;

  env.IMAGE_PATH = '../images/';

  env.SOUND_PATH = '../sounds/jalastram/';

  env.ENGINE.leftHeader = 'INFORMATION';

  env.ENGINE.rightHeader = 'CRYSTALS';

  env.SPRITE_DEFAULT_CONFIG.boundAction = 'STOP';

  env.ANICYCLE_DEFAULT_CONFIG.name = 'SPIN';

  bonehead = null;

  pickupSnd = null;

  crystals = {};

  gh.init = function() {
    var canvasHeight, canvasWidth, color, colors, _i, _len;
    Greenhorn.start();
    pickupSnd = new Sound({
      url: 'SFX_Pickup_20.wav'
    });
    canvasWidth = $('#gh-canvas')[0].width;
    canvasHeight = $('#gh-canvas')[0].height;
    colors = ['blue', 'green', 'grey', 'orange', 'pink', 'yellow'];
    for (_i = 0, _len = colors.length; _i < _len; _i++) {
      color = colors[_i];
      crystals[color] = new AniSprite({
        imageFile: "crystals/" + color + "Crystal.png",
        x: Math.random() * canvasWidth - canvasWidth / 2,
        y: Math.random() * canvasHeight - canvasHeight / 2,
        width: 32,
        height: 32,
        cycle: {}
      });
    }
    bonehead = new AniSprite({
      imageFile: 'bonehead.png',
      cellWidth: 64,
      cellHeight: 64,
      frameRate: 23,
      current: 'STAND_DOWN',
      cycleSTAND_UP: {
        index: 9,
        start: 1,
        stop: 1
      },
      cycleSTAND_LEFT: {
        index: 10,
        start: 1,
        stop: 1
      },
      cycleSTAND_DOWN: {
        index: 11,
        start: 1,
        stop: 1
      },
      cycleSTAND_RIGHT: {
        index: 12,
        start: 1,
        stop: 1
      },
      cycleWALK_UP: {
        index: 9,
        start: 2
      },
      cycleWALK_LEFT: {
        index: 10,
        start: 2
      },
      cycleWALK_DOWN: {
        index: 11,
        start: 2
      },
      cycleWALK_RIGHT: {
        index: 12,
        start: 2
      }
    });
    $('#gh-left-panel').append('<h4 class=\'gh-sub-h\'>Instructions</h4>\n<p class=\'gh-p\'>\nUse the arrow keys to move Bonehead and collect the\ncolored crystals.\n</p>\n<h4 class=\'gh-sub-h\'>Acknowledgements</h4>\n<p class=\'gh-p\'>\nThe \'bonehead.png\' sprite sheet used for this example\nwas generated using <a class=\'gh-a\' \nhref=\'http://gaurav.munjal.us/Universal-LPC-Spritesheet-Character-Generator\'>\nthis</a> tool. Which uses open-source resources that were created\nin what\'s know as the <a class=\'gh-a\' \nhref=\'http://lpc.opengameart.org\'>Liberated Pixel Cup</a>, which was sponsered\nby <a class=\'gh-a\' href=\'http://opengameart.org\'>OpenGameArt.org</a>.\n</p>\n<h4 class=\'gh-sub-h\'>Discussion</h4>\n<p class=\'gh-p\'>\nThis example is a full demonstration of the Greenhorn AniSprite class.\nTo better understand what\'s going on, check out the source code, or the\ndocumentation (coming soon).\n</p>');
    return $('#gh-right-panel').append('<ul>\n<li id="blue">BLUE: </li>\n<li id="green">GREEN: </li>\n<li id="grey">GREY: </li>\n<li id="orange">ORANGE: </li>\n<li id="pink">PINK: </li>\n<li id="yellow">YELLOW: </li>\n</ul>');
  };

  gh.update = function() {
    var color, crystal, direction, _results;
    if (Greenhorn.isDown[KEYS.UP]) {
      bonehead.change('y', 50).set('animation', 'WALK_UP');
    } else if (Greenhorn.isDown[KEYS.DOWN]) {
      bonehead.change('y', -50).set('animation', 'WALK_DOWN');
    } else if (Greenhorn.isDown[KEYS.RIGHT]) {
      bonehead.change('x', 50).set('animation', 'WALK_RIGHT');
    } else if (Greenhorn.isDown[KEYS.LEFT]) {
      bonehead.change('x', -50).set('animation', 'WALK_LEFT');
    } else {
      direction = bonehead.get('current').match(/(UP|LEFT|DOWN|RIGHT)/)[0];
      bonehead.set('animation', "STAND_" + direction);
    }
    _results = [];
    for (color in crystals) {
      crystal = crystals[color];
      if (bonehead.collidesWith(crystal)) {
        pickupSnd.play();
        crystal.set('visible', false);
        _results.push($("#" + color).html("" + (color.toUpperCase()) + ": FOUND!"));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

}).call(this);
