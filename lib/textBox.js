// Generated by CoffeeScript 1.8.0

/*
textBox.coffee

The Greenhorn Gaming TextBox class
 */

(function() {
  var Sprite, env, game,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  game = typeof exports !== "undefined" && exports !== null ? exports : this;

  env = require('./environment').env;

  Sprite = require('./sprite').Sprite;

  game.TextBox = (function(_super) {
    __extends(TextBox, _super);

    function TextBox(config) {
      var key, value, _ref;
      if (config == null) {
        config = {};
      }
      _ref = env.TEXTBOX_DEFAULT_CONFIG;
      for (key in _ref) {
        value = _ref[key];
        if (config[key] == null) {
          config[key] = value;
        }
      }
      this._text = [];
      this._background = {};
      this._border = {};
      this._font = {};
      this._margins = {};
      TextBox.__super__.constructor.call(this, config);
      this._fitText();
    }

    TextBox.prototype.get = function(what) {
      switch (what) {
        case "text":
          return this._text.join('\n');
        case "align":
          return this._dis.context.textAlign;
        case "background":
        case "border":
        case "font":
        case "margins":
          return this["_".concat(what)];
        case what.indexOf("background") === 0:
          return this._background[what.slice(10).toLowerCase()];
        case what.indexOf("border") === 0:
          return this._border[what.slice(6).toLowerCase()];
        case what.indexOf("font") === 0:
          return this._font[what.slice(4).toLowerCase()];
        case what.indexOf("margins") === 0:
          return this._margins[what.slice(7).toLowerCase()];
        default:
          return TextBox.__super__.get.call(this, what);
      }
    };

    TextBox.prototype.set = function(what, to) {
      var k, v;
      if (what === "config") {
        for (k in to) {
          v = to[k];
          this.set(k, v);
        }
      } else if (what === "text") {
        this._text = to.split("\n");
      } else if (what === "align") {
        this._dis.context.textAlign = to;
      } else if (what === "background" || what === "border" || what === "font" || what === "margins") {
        for (k in to) {
          v = to[k];
          this["_".concat(what)][k] = v;
        }
      } else if (what.indexOf("background") === 0) {
        this._background[what.slice(10).toLowerCase()] = to;
      } else if (what.indexOf("border") === 0) {
        this._border[what.slice(6).toLowerCase()] = to;
      } else if (what.indexOf("font") === 0) {
        this._font[what.slice(4).toLowerCase()] = to;
      } else if (what.indexOf("margins") === 0) {
        this._margins[what.slice(7).toLowerCase()] = to;
      } else {
        TextBox.__super__.set.call(this, what, to);
      }
      return this;
    };

    TextBox.prototype.showBackground = function() {
      this._background.visible = true;
    };

    TextBox.prototype.hideBackground = function() {
      this._background.visible = false;
    };

    TextBox.prototype.showBorder = function() {
      this._border.visible = true;
      this._fitText();
    };

    TextBox.prototype.hideBorder = function() {
      this._border.visible = false;
      this._fitText();
    };

    TextBox.prototype._fitText = function() {
      var len, line, old_height, old_width, _i, _len, _ref;
      old_width = this._dis.width;
      old_height = this._dis.height;
      this._dis.width = 0;
      this._dis.height = (this._font.size * this._text.length) + (this._font.size * (this._text.length - 1));
      _ref = this._text;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        len = this._dis.context.measureText(line).width;
        if (this._dis.width < len) {
          this._dis.width = len;
        }
      }
      this._dis.width += this._margins.left + this._margins.right;
      this._dis.height += this._margins.top + this._margins.bottom;
      if (this._border.visible) {
        this._dis.width += 2 * this._border.size;
        this._dis.height += 2 * this._border.size;
      }
      if (this._dis.width < old_width) {
        this.change("x", -Math.abs(this._dis.width - old_width) / 2);
      } else {
        this.change("x", Math.abs(this._dis.width - old_width) / 2);
      }
      if (this._dis.height < old_height) {
        this.change("y", -Math.abs(this._dis.height - old_height) / 2);
      } else {
        this.change("y", Math.abs(this._dis.height - old_height) / 2);
      }
      return this;
    };

    TextBox.prototype._writeText = function() {
      var i, line, xOffset, yOffset, _i, _len, _ref;
      xOffset = this._margins.left;
      yOffset = this._margins.top + this._font.size;
      if (this._border.visible) {
        xOffset += this._border.size;
        yOffset += this._border.size;
      }
      this._dis.context._font = "" + this._font.size + "px " + this._font.name;
      this._dis.context.fillStyle = this._font.color;
      this._dis.context.globalAlpha = this._font.alpha;
      if (this._text.length > 1) {
        _ref = this._text;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          line = _ref[i];
          this._dis.context.fillText(line, this._pos.x + xOffset - (this._dis.width / 2), -this._pos.y + yOffset - (this._dis.height / 2) + (this._font.size * 2 * i));
        }
      } else {
        this._dis.context.fillText(this._text[0], this._pos.x + xOffset - (this._dis.width / 2), -this._pos.y + yOffset - (this._dis.height / 2));
      }
    };

    TextBox.prototype._draw = function() {
      this._dis.context.save();
      if (this._background.visible) {
        this._dis.context.fillStyle = this._background.color;
        this._dis.context.globalAlpha = this._background.alpha;
        this._dis.context.fillRect(this._pos.x - this._dis.width / 2, -this._pos.y - this._dis.height / 2, this._dis.width, this._dis.height);
      }
      if (this._border.visible) {
        this._dis.context.strokeStyle = this._border.color;
        this._dis.context.lineWidth = this._border.size;
        this._dis.context.globalAlpha = this._border.alpha;
        this._dis.context.strokeRect(this._pos.x - (this._dis.width / 2), -this._pos.y - (this._dis.height / 2), this._dis.width, this._dis.height);
      }
      this._writeText();
      this._dis.context.restore();
    };

    return TextBox;

  })(Sprite);

}).call(this);
