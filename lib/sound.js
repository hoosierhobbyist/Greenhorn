// Generated by CoffeeScript 1.8.0

/*
sound.coffee

Greenhorn Gaming Engine Sound class
 */

(function() {
  var Greenhorn, env, game, _webkitAudioContext;

  game = typeof exports !== "undefined" && exports !== null ? exports : this;

  env = require('./environment').env;

  Greenhorn = require('./greenhorn').Greenhorn;

  _webkitAudioContext = typeof webkitAudioContext === "function" ? new webkitAudioContext() : void 0;

  game.Sound = (function() {
    function Sound(url) {
      var mp3_src, ogg_src, request, wav_src;
      if (url == null) {
        url = env.SOUND_DEFAULT_URL;
      }
      this._url = env.SOUND_PATH.concat(url);
      if (typeof webkitAudioContext !== "undefined" && webkitAudioContext !== null) {
        this._source = _webkitAudioContext.createBufferSource();
        this._gainNode = _webkitAudioContext.createGainNode();
        request = new XMLHttpRequest();
        request.responseType = 'arraybuffer';
        request.open('GET', this._url, true);
        request.successCallback = (function(_this) {
          return function(buffer) {
            _this._source.buffer = buffer;
            _this._source.connect(_this._gainNode);
            _this._gainNode.connect(_webkitAudioContext.destination);
          };
        })(this);
        request.failureCallback = function() {
          throw new Error("Webkit Sound Error");
        };
        request.onload = function() {
          return _webkitAudioContext.decodeAudioData(this.response, this.successCallback, this.failureCallback);
        };
        request.send();
      } else {
        this._audio = document.createElement('audio');
        this._audio.setAttribute('controls', 'none');
        this._audio.style.display = 'none';
        mp3_src = document.createElement('source');
        ogg_src = document.createElement('source');
        wav_src = document.createElement('source');
        mp3_src.type = 'audio/mpeg';
        ogg_src.type = 'audio/ogg';
        wav_src.type = 'audio/wav';
        if (this._url.indexOf('.mp3') !== -1) {
          mp3_src.src = this._url;
          ogg_src.src = this._url.replace('.mp3', '.ogg');
          wav_src.src = this._url.replace('.mp3', '.wav');
        } else if (this._url.indexOf('.ogg') !== -1) {
          ogg_src.src = this._url;
          mp3_src.src = this._url.replace('.ogg', '.mp3');
          wav_src.src = this._url.replace('.ogg', '.wav');
        } else if (this._url.indexOf('.wav') !== -1) {
          wav_src.src = this._url;
          mp3_src.src = this._url.replace('.wav', '.mp3');
          ogg_src.src = this._url.replace('.wav', '.ogg');
        } else {
          throw new Error("Sound url must be .mp3, .ogg, or .wav extension");
        }
        this._audio.appendChild(mp3_src);
        this._audio.appendChild(ogg_src);
        this._audio.appendChild(wav_src);
        Greenhorn._elmnts.canvas.appendChild(this._audio);
      }
      return;
    }

    Sound.prototype.play = function(opt) {
      if (opt == null) {
        opt = {};
      }
      if (typeof webkitAudioContext !== "undefined" && webkitAudioContext !== null) {
        if (opt.gainValue != null) {
          this._gainNode.gain.value = opt.gainValue;
        }
        if (opt.loop != null) {
          this._source.loop = opt.loop;
        }
        this._source.start(0);
      } else {
        if (opt.loop != null) {
          this._audio.loop = opt.loop;
        }
        this._audio.play();
      }
    };

    Sound.prototype.stop = function() {
      if (typeof webkitAudioContext !== "undefined" && webkitAudioContext !== null) {
        this._source.stop(0);
      } else {
        this._audio.pause();
        this._audio.currentTime = 0;
      }
    };

    return Sound;

  })();

}).call(this);
