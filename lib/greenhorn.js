// Generated by CoffeeScript 1.8.0

/*
greenhorn.coffee
by Seth Bullock

***THE GREENHORN GAMING ENGINE***

primarily inspired by Andy Harris'
(aharrisbooks.net) simpleGame.js gaming engine
 */

(function() {
  var env, game, key, _masterID, _masterUpdate;

  game = typeof exports !== "undefined" && exports !== null ? exports : this;

  env = require('./environment').env;

  game.KEYS = {
    LEFT: 37,
    RIGHT: 39,
    UP: 38,
    DOWN: 40,
    SPACE: 32,
    ESC: 27,
    PGUP: 33,
    PGDOWN: 34,
    HOME: 36,
    END: 35,
    _0: 48,
    _1: 49,
    _2: 50,
    _3: 51,
    _4: 52,
    _5: 53,
    _6: 54,
    _7: 55,
    _8: 56,
    _9: 57,
    A: 65,
    B: 66,
    C: 67,
    D: 68,
    E: 69,
    F: 70,
    G: 71,
    H: 72,
    I: 73,
    J: 74,
    K: 75,
    L: 76,
    M: 77,
    N: 78,
    O: 79,
    P: 80,
    Q: 81,
    R: 82,
    S: 83,
    T: 84,
    U: 85,
    V: 86,
    W: 87,
    X: 88,
    Y: 89,
    Z: 90
  };

  game.keysDown = (function() {
    var _i, _len, _ref, _results;
    _ref = new Array(256);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      key = _ref[_i];
      _results.push(key = false);
    }
    return _results;
  })();

  document.onkeydown = function(e) {
    e.preventDefault();
    return keysDown[e.keyCode] = true;
  };

  document.onkeyup = function(e) {
    e.preventDefault();
    return keysDown[e.keyCode] = false;
  };

  document.onmousemove = function(e) {
    this.mouseX = e.pageX;
    return this.mouseY = e.pageY;
  };

  _masterID = null;

  _masterUpdate = function() {
    Greenhorn.clear();
    if (typeof update === "function") {
      update();
    }
    return Sprites._updateAll();
  };

  game.Greenhorn = (function() {
    function Greenhorn() {}

    Greenhorn._elmnts = {
      main: document.createElement("div"),
      title: document.createElement("h2"),
      leftPanel: document.createElement("div"),
      canvas: document.createElement("canvas"),
      rightPanel: document.createElement("div"),
      bottomPanel: document.createElement("div")
    };

    Greenhorn._elmnts.main.appendChild(Greenhorn._elmnts.title);

    Greenhorn._elmnts.main.appendChild(Greenhorn._elmnts.leftPanel);

    Greenhorn._elmnts.main.appendChild(Greenhorn._elmnts.canvas);

    Greenhorn._elmnts.main.appendChild(Greenhorn._elmnts.rightPanel);

    Greenhorn._elmnts.main.appendChild(Greenhorn._elmnts.bottomPanel);

    Greenhorn.getMouseX = function() {
      return document.mouseX - this.get("main", "offsetLeft") - this.get("canvas", "offsetLeft") - this.get("canvas", "width") / 2;
    };

    Greenhorn.getMouseY = function() {
      return document.mouseY - this.get("main", "offsetTop") - this.get("canvas", "offsetTop") - this.get("canvas", "height") / 2;
    };

    Greenhorn.get = function(elmnt, attr) {
      if (attr) {
        return this._elmnts[elmnt][attr];
      } else {
        return this._elmnts[elmnt];
      }
    };

    Greenhorn.set = function(elmnt, attr, what) {
      var value, _results;
      if (Object.prototype.toString.call(what) === '[object Object]') {
        _results = [];
        for (key in what) {
          value = what[key];
          _results.push(this._elmnts[elmnt][attr][key] = value);
        }
        return _results;
      } else {
        return this._elmnts[elmnt][attr] = what;
      }
    };

    Greenhorn.addButton = function(where, label, style, whenClicked) {
      var button, value;
      if (label == null) {
        label = env.BUTTON_DEFAULT_LABEL;
      }
      if (style == null) {
        style = {};
      }
      if (whenClicked == null) {
        whenClicked = (function(_this) {
          return function() {};
        })(this);
      }
      button = document.createElement("button");
      button.setAttribute("type", "button");
      button.innerHTML = label;
      for (key in style) {
        value = style[key];
        button.style[key] = value;
      }
      button.onclick = whenClicked;
      return this._elmnts[where].appendChild(button);
    };

    Greenhorn.start = function() {
      var bottomPanelStyle, canvasStyle, correctHeight, correctWidth, leftPanelStyle, mainStyle, rightPanelStyle, titleStyle;
      document.body.bgColor = env.BODY_BACKGROUND_COLOR;
      document.body.appendChild(this._elmnts.main);
      mainStyle = {
        width: "100%",
        display: "inline-block",
        backgroundColor: env.ENGINE_BACKGROUND_COLOR
      };
      titleStyle = {
        textAlign: "center",
        cssFloat: "left",
        display: "initial",
        marginTop: "1%",
        marginBottom: "1%",
        backgroundColor: "inherit",
        minWidth: "100%",
        minHeight: "6%",
        maxWidth: "100%",
        maxHeight: "6%"
      };
      leftPanelStyle = {
        minWidth: "15%",
        minHeight: "80%",
        maxWidth: "15%",
        maxHeight: "80%",
        cssFloat: "left",
        display: "initial",
        marginLeft: "1%",
        marginRight: "1%",
        overflow: "auto",
        whiteSpace: "pre",
        backgroundColor: "inherit"
      };
      canvasStyle = {
        minWidth: "66%",
        minHeight: "80%",
        maxWidth: "66%",
        maxHeight: "80%",
        display: "initial",
        cssFloat: "left",
        backgroundColor: env.ENGINE_CANVAS_COLOR
      };
      rightPanelStyle = {
        minWidth: "15%",
        minHeight: "80%",
        maxWidth: "15%",
        maxHeight: "80%",
        display: "initial",
        cssFloat: "left",
        marginLeft: "1%",
        marginRight: "1%",
        overflow: "auto",
        whiteSpace: "pre",
        backgroundColor: "inherit"
      };
      bottomPanelStyle = {
        minWidth: "100%",
        minHeight: "10%",
        maxWidth: "100%",
        maxHeight: "10%",
        display: "initial",
        textAlign: "center",
        cssFloat: "left",
        marginTop: "1%",
        marginBottom: "1%",
        backgroundColor: "inherit"
      };
      this.set("main", "style", mainStyle);
      this.set("title", "style", titleStyle);
      this.set("leftPanel", "style", leftPanelStyle);
      this.set("canvas", "style", canvasStyle);
      this.set("rightPanel", "style", rightPanelStyle);
      this.set("bottomPanel", "style", bottomPanelStyle);
      correctWidth = this.get("canvas", "offsetWidth");
      correctHeight = this.get("canvas", "offsetHeight");
      this.set("canvas", "width", correctWidth);
      this.set("canvas", "height", correctHeight);
      this._elmnts.canvas.getContext("2d").translate(this.get("canvas", "width") / 2, this.get("canvas", "height") / 2);
      this.set("title", "innerHTML", env.ENGINE_TITLE);
      this.set("leftPanel", "innerHTML", env.ENGINE_LEFT_PANEL);
      this.set("rightPanel", "innerHTML", env.ENGINE_RIGHT_PANEL);
      this.set("bottomPanel", "innerHTML", env.ENGINE_BOTTOM_PANEL);
      this.set("canvas", "innerHTML", env.ENGINE_CANVAS_ERROR);
      _masterID = setInterval(_masterUpdate, Math.ceil(1000 / env.FRAME_RATE));
    };

    Greenhorn.stop = function() {
      return clearInterval(_masterID);
    };

    Greenhorn.clear = function() {
      return this._elmnts.canvas.getContext("2d").clearRect(-this.get("canvas", "width") / 2, -this.get("canvas", "height") / 2, this.get("canvas", "width"), this.get("canvas", "height"));
    };

    Greenhorn.hide = function() {
      return set("main", "style", {
        "display": "none"
      });
    };

    Greenhorn.show = function() {
      return set("main", "style", {
        "display": "inline-block"
      });
    };

    Greenhorn.hideCursor = function() {
      return set("canvas", "style", {
        "cursor": "none"
      });
    };

    Greenhorn.showCursor = function() {
      return set("canvas", "style", {
        "cursor": "default"
      });
    };

    return Greenhorn;

  })();

}).call(this);
